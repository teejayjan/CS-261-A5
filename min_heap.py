# Course: CS261 - Data Structures
# Assignment: 5
# Student: Timothy Jan
# Description: Implements min heap.


# Import pre-written DynamicArray and LinkedList classes
from a5_include import *


class MinHeapException(Exception):
    """
    Custom exception to be used by MinHeap class
    DO NOT CHANGE THIS CLASS IN ANY WAY
    """
    pass


class MinHeap:
    def __init__(self, start_heap=None):
        """
        Initializes a new MinHeap
        DO NOT CHANGE THIS METHOD IN ANY WAY
        """
        self.heap = DynamicArray()

        # populate MH with initial values (if provided)
        # before using this feature, implement add() method
        if start_heap:
            for node in start_heap:
                self.add(node)

    def __str__(self) -> str:
        """
        Return MH content in human-readable form
        DO NOT CHANGE THIS METHOD IN ANY WAY
        """
        return 'HEAP ' + str(self.heap)

    def is_empty(self) -> bool:
        """
        Return True if no elements in the heap, False otherwise
        DO NOT CHANGE THIS METHOD IN ANY WAY
        """
        return self.heap.length() == 0

    def add(self, node: object) -> None:
        """Adds a new object to the MinHeap maintaining heap property."""

        self.heap.append(node)
        node_index = self.heap.length() - 1
        parent_index = (self.heap.length() - 2) // 2  # initial parent index length - 2 to account for zero index

        if node_index <= 0:
            return

        while self.heap.get_at_index(node_index) < self.heap.get_at_index(parent_index):
            self.heap.swap(node_index, parent_index)
            node_index = parent_index
            parent_index = (node_index - 1) // 2
            if node_index <= 0:
                break

    def get_min(self) -> object:
        """Returns an object with a minimum key without removing it from the heap. Raises an exception if
        the heap is empty."""

        if self.is_empty():
            raise MinHeapException

        return self.heap[0]

    def remove_min(self) -> object:
        """Returns an object with a minimum key and removes it from the heap. Raises an exception if the heap is
        empty."""

        if self.is_empty():
            raise MinHeapException

        min = self.get_min()
        self.heap.swap(0, self.heap.length() - 1)
        self.heap.pop()

        def rec_min(i, l, r):
            """Recursive remove_min helper."""
            if l > self.heap.length() - 1 and r > self.heap.length() - 1:
                return
            # just left is in bounds
            if l <= self.heap.length() <= r:
                if self.heap[i] > self.heap[l]:
                    self.heap.swap(i, l)
                return
            # left is minimum
            elif self.heap[l] <= self.heap[r] and self.heap[i] > self.heap[l]:
                self.heap.swap(i, l)
                return rec_min(l, (l * 2) + 1, (l * 2) + 2)
            # right is minimum
            elif self.heap[r] < self.heap[l] and self.heap[i] > self.heap[r]:
                self.heap.swap(i, r)
                return rec_min(r, (r * 2) + 1, (r * 2) + 2)

        rec_min(0, 1, 2)
        return min

    def build_heap(self, da: DynamicArray) -> None:
        """Receives a Dynamic Array and builds a proper MinHeap. Current contents of MinHeap are lost upon calling
        this method."""

        self.heap = DynamicArray()
        for i in range(da.length()):
            self.heap.append(da[i])

        non_leaf_index = (self.heap.length() // 2) - 1

        while non_leaf_index >= 0:
            i = non_leaf_index
            l = (i * 2) + 1
            r = (i * 2) + 2
            while l < self.heap.length() and r < self.heap.length():
                # swap with left
                if self.heap[l] <= self.heap[r] and self.heap[i] > self.heap[l]:
                    self.heap.swap(i, l)
                    i = l
                    l = i * 2 + 1
                    r = i * 2 + 2
                # swap with right
                elif self.heap[l] > self.heap[r] and self.heap[i] > self.heap[r]:
                    self.heap.swap(i, r)
                    i = r
                    l = i * 2 + 1
                    r = i * 2 + 2
                else:
                    break
            non_leaf_index -= 1


# BASIC TESTING
if __name__ == '__main__':

    # print("\nPDF - add example 1")
    # print("-------------------")
    # h = MinHeap()
    # print(h, h.is_empty())
    # for value in range(300, 200, -15):
    #     h.add(value)
    #     print(h)
    #
    # print("\nPDF - add example 2")
    # print("-------------------")
    # h = MinHeap(['fish', 'bird'])
    # print(h)
    # for value in ['monkey', 'zebra', 'elephant', 'horse', 'bear']:
    #     h.add(value)
    #     print(h)
    #
    # print("\nPDF - get_min example 1")
    # print("-----------------------")
    # h = MinHeap(['fish', 'bird'])
    # print(h)
    # print(h.get_min(), h.get_min())
    #
    # print("\nPDF - remove_min example 1")
    # print("--------------------------")
    # h = MinHeap([1, 10, 2, 9, 3, 8, 4, 7, 5, 6])
    # while not h.is_empty():
    #     print(h, end=' ')
    #     print(h.remove_min())
    #
    # print("\nCustom - remove-min example A")
    # print("-----------------------------")
    # h = MinHeap([-657, -649, -626, -612, -644, -622, -614, -582, -609, -601, -643, -578, -622, -560, -563, -562, -540, -606, -584, -568, -573, -634, -617, -436, -553, -561, -535, -296, -397, -331, -411, -357, -230, -520, -405, -596, -540, -490, -523, -459, -402, -536, -347, -623, -519, -569, -354, -292, -394, -524, -519, -424, -386, -182, -364, 136, -112, -57, -228, -66, 48, -305, -351, -352, -272, -107, -69, -230, -334, -117, -354, -265, -212, -515, -533, -115, -300, -369, -353, -415, -63, -258, 145, -178, -390, -59, -313, -215, -462, -390, -490, 162, -508, -244, 29, 25, 172, -310, -232, -361, -133, -469, -361, -79, -312, -124, -121, 127, 32, 43, 311, 152, 338, -102, 541, 150, -54, 142, -170, 147, 441, 298, 69, 440, 17, 390, 444, 577, -166, 56, 402, 86, 335, 544, 299, 20, 147, 358, 203, 841, 56, -322, -330, -176, 227, -78, 670, -478, -375, -119, -248, 487, 274, -287, 257, -286, -345, -295, 55, 50, 46, 83, 95, 242, 147, 208, 638, 166, 153, 6, -385, 453, 47, -219, -64, -25, 401, -57, 363, 89, 353, -427, 286, 227, 246, -379, 309, -212, 400, 153, 496, 626, 28, 363, 456, 562, -289, 509, 426, 102, 440, 154, 44, -122, 724, -131, 436, 590, 577, -255, -71, -72, 570, 169, 578, 888, 784, 241, 40, 439, 428, 752, 633, 847, 843, 358, 951, 410, 58, 748, 907, 657, 571, 165, 163, 244, 424, 217, 868, 486, 453, 689, 782, 421, 303, 889, 241, 623, 762, 169, 642, 816, 628, 932, 770, 913, 764, 922, 477, 708, 303, 696, 818, 576, 212, 519, 569, 550, 588, 870, 608, 216, 538, 996, 676, 877, 997, 613, 511, 955, 919, 677, 725, 837, 226, 910, 808, 346, 300, 782, 695, -60, 970, 897, 777, 792, -38, 543, 123, 402, 258, -40, -57, 513, 939, 592, 643, 559, 453, 444, 459, 760, 136, 334, 87, 622, 486, 698, 637, 536, 359, 505, 551, 313, 352, 948, 135, 891, 552, 613, 406, 408, 439, 777, 727, 734, 511, 282, 425, 293, 177, -175, 938, 978, 899, 539, 490, 825, 38, 955, 383, 908, 684, 751, 586, 626, 776])
    # h.remove_min()
    # print(h)

    # print("\nCustom - remove-min example B")
    # print("-----------------------------")
    # h = MinHeap([-983, -982, -982, -971, -981, -977, -974, -963, -961, -968, -962, -920, -861, -956, -972, -922, -923, -904, -956, -954, -954, -945, -856, -848, -845, -674, -845, -879, -915, -944, -808, -613, -865, -766, -882, -719, -882, -872, -931, -913, -851, -879, -946, -910, -793, -836, -782, -837, -675, -788, -655, -322, -562, -688, -796, -869, -598, -572, -864, -664, -903, -807, -609, -330, -434, -806, -835, -389, -419, -752, -876, -535, -412, -829, -833, -667, -791, -844, -716, -886, -746, -785, -822, -178, -764, -858, -894, -832, -859, -414, -651, -775, -752, -770, -562, -810, -415, -512, -613, -227, -249, -456, -351, -272, -295, -376, -171, -511, -617, -785, -728, -836, -54, -502, -591, -234, -199, -434, -782, -590, -660, -803, -720, -312, -630, 263, -148, -270, -95, -148, -250, -656, -702, -779, -810, -352, -335, -337, -398, -246, -136, -660, -834, -367, -431, -363, -385, -705, -795, -804, -680, -144, -647, -119, -589, -842, -743, -401, -526, -755, -857, -573, -648, -775, -462, -306, -771, -2, -81, -677, -415, -372, -848, -558, -774, -660, -709, -798, -848, -396, -357, -536, -314, -486, -596, -724, -421, -565, -761, -192, -513, -373, -727, -415, -311, -170, -157, 275, -495, 424, 436, -186, 320, 764, -366, 485, 339, 671, -149, -215, -194, -75, -305, 241, 59, 123, -336, -133, -583, -621, -204, -486, -431, 131, 91, 155, 295, 151, -461, 251, -64, -69, -121, -138, 175, 409, 100, 0, -458, -489, -373, 70, -612, -690, 112, -351, -284, -65, -284, -590, -26, 612, 361, 680, -135, 682, -138, 290, 90, 220, 52, 86, -169, 5, -284, -542, -204, -279, -336, -481, -698, -101, 433, 438, -251, 209, -284, 513, 260, 5, -194, 133, -134, -378, 188, -552, -481, 124, -119, -286, 104, 311, -144, -104, -347, -416, -530, -698, 151, -771, -348, -138, -407, 734, 102, 315, -372, 252, 53, -175, 675, -575, -53, -618, -648, -133, -399, 33, -410, -670, -708, 167, -690, -377, 287, -644, -147, -761, -32, 41, 59, 510, -291, -197, -582, 674, 728, -46, 435, 192, -274, -150, -203, -359, -354, 18, -465, -224, -124, 257, -753, -13, -603, -431, -482, -268, -501, -27, -781, 296, -175, -2, -167, 222, -376, 262, -291, 418, -134, -356, -502, -96, -631, 70, -205, -454, 103, -401, -720, 441, -167, 299, -491, -288, 488, -617, -566, 214, 3, -210, -184, 195, 779, 708, 516, 852, 633, -103, -352, 914, 752, 864, 565, 767, 267, 911, 722, 878, 788, 853, -103, 781, 685, 960, 725, 884, 883, 612, 93, 627, 271, 776, 243, 721, 169, 632, -269, 807, 404, 560, 697, 941, 851, 337, 682, 507, 890, 59, 945, 614, 31, 139, 144, 379, 228, 857, 553, 946, 293, 725, 104, 729, 451, 994, 645, 640, 694, 651, 439, 718, 489, 793, 229, 445, 157, 198, 231, 167, 997, 873, 218, 876, 613, 427, 313, 341, 592, 76, -423, 502, 215, 20, 656, 586, 561, 79, -497, 441, -108, 420, 540, 860, 601, 846, 964, 768, 60, 0, -59, 666, -125, 987, 562, 973, 744, 866, 543, 991, 740, 783, 926, 847, 707, 694, -94, 321, 640, 178, 737, 811, 388, 257, 216, 90, 513, 474, -124, 646, 714, 999, 4, -97, -330, 494, -103, 700, 19, 842, 248, 720, 389, 549, -275, 638, 112, 948, 637, 968, 495, 243, 521, 926, 916, 468, 456, 974, 953, 450, 271, 768, 336, 555, 341, 681, 568, 263, -48, 739, 344, 770, 557, 206, -115, 204, -124, 882, 305, 193, 96, 335, 146, 732, 507, 809, 641, 434, 39, 689, 555, 526, 700, -7, -9, -46, 802, -386, -381, 620, 590, 490, -680, 616, -56, 541, 421, 814, -310, 798, 985, 294, 798, 372, 812, -92, -123, 716, 399, 444, 331, 685, -1, 973, 953, 839, -436, 905, -18, -80, 509, -90, -586, 878, 82, 73, -103, 645, 946, 394, 827, 612, -134, -8, -431, 798, 495, 445, 143, 461, 349, 575, 682, 153, 240, 505, 122, 695, 51, 116, -24, 188, 324, 305, 146, 549, 643, 937, -56, 429, -34, 921, 130, 935, 926, 772, 930, 888, 470, 821, 798, 819, 597, 955, 84, 789, 924, 169, 94, 397, 300, 730, -43, 682, 561, 681, -422, 839, -100, 358, 780, 969, 891, 237, -337, 591, 919, -76, -90, 914, -152, -61, 935, 617, 323, 681, 92, 944, 902, 485, 195, 932, 552, 634, 230, 981, 327, 263, -115, 608, 344, 519, 404, 514, 582, 880, 335, 984, 874, 155, 430, 434, 256, 235, -159, 911, -28, 878, 403, 953, 70, 504, 201, 330, -109, 880, 282, 544, 208, 579, 381, 665, 696, 50, 566, 698, 650, -327, 741, 730, 710, 970, 598, 571, -56, -351, 779, 928, 581, 393, 554, 856])
    # h.remove_min()
    # print(h)

    # print("\nPDF - build_heap example 1")
    # print("--------------------------")
    # da = DynamicArray([100, 20, 6, 200, 90, 150, 300])
    # h = MinHeap(['zebra', 'apple'])
    # print(h)
    # h.build_heap(da)
    # print(h)
    # da.set_at_index(0, 500)
    # print(da)
    # print(h)

    print("\nPDF - build_heap example A")
    print("--------------------------")
    da = DynamicArray([795, 882, -129, 9, -532, -888, 942, 222, 754, -601, 509, -199, -87, -727, -910, 912, -983, -162, -964, -974, 671, 81, 702, 432, -127, 24, 2, -330, 594, -30, -853, -960, -47, 886, 928, 385, -816, 116, 837, 315, 980, -186, 692, 302, 977, -627, 810, 926, 234, 913, 640, 615, -995, -74, -333, 258, 182, -512, 903, -484, 65, -960, 234, -32, -43, -775, -257, -552, -929, -601, 77, -251, 294, -47, 2, -607, 299, 201, -202, -99, -799, -124, -997, -862, -993, 261, -398, -511, 204, 323, -934, -946, -819, -275, -815, 995, 893, -570, 356, 928, 864, -97, 63, -882, -885, -705, 7, -111, 303, -67, 807, -721, -138, -827, 776, -1, 808, 459, -807, 175, -615, 874, -665, -874, -87, -297, 7, -443, -666, -223, -961, -564, -385, -104, 331, -833, -324, 45, 796, -185, -15, 437, 451, -577, 192, 407, 729, -57, 965, -881, -227, 848, 587, -662, -830, 660, -251, -743, 211, -481, 186, 406, 574, -110, -66, -111, 850, -209, -425, -580, -242, -187, -679, -458, 102, -329, 920, -717, -56, 21, -625, -461, 803, -838, -429, 896, 927, 747, -695, -26, 78, -386, 661, -353, -101, -197, 497, -451, 612, 463, 420, 819, -696, 143, -714, -699, 129, 77, 603, 870, -251, -196, -818, -171, -167, -975, -115, 516, 337, 794, 797, 262, 508, -951, -987, -390, 760, -212, 797, 521, 570, -424, -880, 943, -123, 38, -969, -141, 76, 112, -306, 471, 750, -891, 482, 950, 492, 233, -612, -474, 741, -689, -458, 539, 60, -311, 646, -728, -570, -122, -98, -640, 81, 684, -781, -743, -694, -450, 64, -779, 33, -227, -771, 874, 684, 990, -151, -889, 183, -923, -100, 962, -221, -334, 254, -753, 219, -667, -482, 690, 308, -651, 497, 694, 853, 974, -539, -758, 131, -447, 268, 758, -222, -518, 34, 633, 214, 369, -347, 643, 884, 918, 939, 914, -362, 714, 951, -277, -621, -452, 512, -725, 203, -569, 750, -339, -858, -900, -497, 634, 84, -597, 136, 110, 32, -393, -623, 934, 380, 39, 781, -771, 233, -276, 135, -426, -325, -349, -52, -221, 541, -446, 514, -243, 243, -561, -362, 130, 577, -144, 280, 416, 830, 432, 635, 930, 276, 842, -882, 355, -227, 168, -446, 316, -736, -36, 964, -868, -39, -716, -199, -274, 761, -357, -114, -645, -460, 191, 709, 878, 286, 915, -823, 449, -850, -196, 671, 372, -422, -9, -157, 78, -278, 606, -819, 920, -253, -808, 27, -946, 276, -363, 505, -732, 831, -672, 329, 305, 383, -993, 783, 604, 863, -980, -9, -299, 747, -377, -819, -135, 135, -784, -136, -104, 491, -140, 710, 920, 656, 85, -802, -865, 144, 655, -258, -615, -599, 691, -310, -117, -758, 125, 916, 970, 862, -480, 481, -5, 889, -856, 73, -441, -565, -809, -260, 546, -257, 73, -845, -94, -910, 441, -957, -817, -116, 132, -168, -472, 323, 693, 994, -487, -111, -867, 753, 624, -427, -308, 633, 284, 265, -746, 946, 832, 425, -888, -653, 496, -577, 383, -251, 300, -417, 675, 608, -83, -226, -227, 665, 896, -978, -501, -93, -196, 627, 880, -544, -679, 656, -52, -680, -944, -239, -758, -810, 490, 502, 357, -780, 672, 50, 82, 144, 614, 423, 56, -619, 163, 576, -272, -422, -215, 129, -458, -151, 152, 500, 293, -651, -480, 354, 125, -874, 737, 759, -972, 361, -105, -665, 414, -751, -261, 15, 648, 829, 880, 538, -915, -193, 276, -417, -876, -323, 971, 56, 160, -882, -124, -887, 499, -118, 751, -828, 794, -729, -929, -819, -341, -113, 740, 438, -495, 682, -355, 266, -724, 524, -736, 886, 565, 430, -450, -260, 477, -778, 857, -37, 896, 619, 949, 238, 976, -966, -385, -410, -821, -508, 314, 320, -138, 539, -467, -548, -166, 852, -554, 414, -49, 597, 241, -631, -88, -436, 450, 802, -720, -511, 84, -45, -38, -985, -760, -469, 359, -254, -912, 58, 782, -22, -907, 827, -486, -243, 439, -466, 304, 951, -916, 194, 411, -45, -266, -316, 762, -961, 99, 699, 386, 466, 794, 847, 910, 884, -428, -194, 282, -794, 497, 890, -38, -383, 638, 46, 415, -35, 400, 496, -821, 651, -816, 395, 750, 368, 757, 533, 802, -212, -804, -7, -805, 156, 590, -492, -879, -475, -91, 910, -658, 276, 218, -307, 896, 212, 136, -173, 401, 473, -947, -86, 145, 556, 521, -701, 337, -654, -933, -164, 832, -485, -533, 566, 25, -987, 594, 456, 157, 875, 522, 649, -564, -587, -4, -362, -711, 970, 243, -1000, 223, 428, -632, -7, -711, -658, -429, -959, -4, 696, -886, 628, -639, 946, -803, -60, 289, -182, -504, 804, -207, 926, 418, 315, -384, -534, 391, 971, -680, 375, -722, 101, 644, -550, 806, -31, -561, -637, 76, 816, -168, -708, -334, -454, -649, 872, -236, 342, -576, 888, -166, -307, 957, -383, 586, -267, 470, 853, -293, 147, 262, -482, 665, 889, 295, -623, -572, -49, -304, -103, -877, 12, -203, -208, -283, 565, 118, -19, 845, -168, 775, 899, 52, 775, -525, -418, -205, 202, -396, -187, -16, -290, -102, -790, -509, 264, -822, 540, 322, 544, 397, 389, -36, 731, 562, 518, 535, 673])
    h = MinHeap([-990, -988, -984, -975, -984, -962, -975, -945, -908, -966, -970, -960, -812, -924, -968, -943, -649, -908, -877, -834, -845, -873, -847, -885, -942, -797, -796, -876, -854, -895, -960, -917, -876, -530, -560, -691, -829, -722, -647, -732, -824, -786, -829, -518, -327, -812, -793, -843, -821, -934, -459, -724, -706, -754, -698, -830, -793, -777, -781, -831, -826, -848, -800, -722, -849, -743, -675, -448, -474, -309, 155, -418, -57, -490, -413, 161, -596, -276, -103, -377, -511, -572, -793, -661, -771, -219, -728, -93, -405, -162, -265, -402, -568, -467, -755, -794, -481, -531, -455, -695, -913, -353, -432, -491, -608, -329, -591, 197, -637, -669, -406, -657, -716, -313, -769, -475, -637, -495, -567, -704, -734, -200, -825, -589, -705, -689, -534, -532, -705, -362, -494, -662, -692, -587, -412, -85, -68, 6, -220, 251, 3, 252, 165, -23, -103, 316, 156, -327, 166, -74, -150, 407, 550, -325, -488, 48, 8, 142, 11, 898, -95, -370, -432, 173, 168, -114, -31, -598, 160, -570, -701, -147, -112, -363, -435, 62, -46, -13, -165, 344, 101, 299, -226, -378, -388, 201, -520, -329, -448, -308, -616, -692, -560, 13, 240, 723, -89, -366, -160, 54, -665, -73, -835, -255, 263, 542, -180, 372, 329, -171, -352, -119, -171, -131, -387, 293, 327, 262, -632, -336, -543, -221, -31, -563, -603, -622, -410, 541, 276, -550, -499, -417, 330, -569, -622, -142, -439, -186, -534, -261, -436, -473, -308, 382, -66, -392, -579, 436, -98, -599, -446, -354, -362, 735, -26, -147, -424, -198, -654, 131, -105, -415, -440, -329, -448, 382, 131, 421, -391, -84, -172, 674, 905, 953, 858, 507, 753, 208, 925, 801, 716, 578, 866, 464, 891, 916, 701, 723, 678, 198, 398, 633, 471, 656, 616, 911, 489, 326, 544, 537, 258, 567, 561, 452, 903, 795, 692, 300, 191, 218, -467, 699, 666, 292, 539, 316, 649, 499, 511, 976, 973, 605, 78, 819, 13, 827, 557, 870, 629, 807, 577, 860, 252, 872, 454, 544, 107, 195, 486, 716, 507, 600, -49, 673, 96, 607, 840, 61, -317, 459, 28, 960, 604, 715, 433, 52, 242, 995, -10, 917, 867, 809, 103, 749, 902, 557, -162, 55, -157, -153, 89, 851, 736, 68, 689, 974, 788, 441, 941, 800, -84, 657, 602, 868, 803, 893, -77, 846, 299, 687, 877, 831, 818, 825, 321, 366, 447, 469, 389, 781, 829, 523, -248, 149, 487, 610, 675, 531, 328, 817, 393, 869, 869, 517, 413, 670, 971, 810, 495, 782, 525, 954, -29, 817, -29, 765, 704, 171, 389, -184, -156, 908, 427, 638, 760, 991, 937, 648, 797, 900, 299, 898, -390, 854, -124, 537, 132, 974, 614, -223, -291, 617, -295, 111, 681, 925, 865, 514, 358, -171, -105, -392, -429, 883, -369, 419, 413, 388, 868, 795, -250, 354, 147, 146, 267, 640, 672, 791, 719, 276, -171, 153, 6, 37, 392, 407, -201, 858, 701, -2, -25, 518, 152, 261, -10, 853, 985, 927, 883, -319, -211, 140, -108, 749, 922, -28, -214, 858, 999, 731, 398, 181, 84, 86, 468, 160, -112, 799, -118, 504, 961, 597, 341, 728, 425, 280, -231, 796, 369, 631, -334, 575, 394, 571, 360, 807, 601, 991, 280, 942, 474, 683, 439, 791])
    print(h)
    h.build_heap(da)
    print(h)
